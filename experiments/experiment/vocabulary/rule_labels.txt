arg_list -> [expr, ",", arg_list]
arg_list -> [expr]
arg_list_or_star -> ["*"]
arg_list_or_star -> [arg_list]
binaryop -> ["!="]
binaryop -> ["*"]
binaryop -> ["+"]
binaryop -> ["-"]
binaryop -> ["/"]
binaryop -> ["<"]
binaryop -> ["<="]
binaryop -> ["<>"]
binaryop -> ["="]
binaryop -> [">"]
binaryop -> [">="]
binaryop -> ["and"]
binaryop -> ["like"]
binaryop -> ["or"]
boolean -> ["false"]
boolean -> ["true"]
expr -> [in_expr]
expr -> [source_subq]
expr -> [unaryop, expr]
expr -> [value, "between", value, "and", value]
expr -> [value, "like", string]
expr -> [value, binaryop, expr]
expr -> [value]
fname -> ["all"]
fname -> ["avg"]
fname -> ["count"]
fname -> ["max"]
fname -> ["min"]
fname -> ["sum"]
from_clause -> ["from", source]
from_clause -> ["from", table_name, join_clauses]
function -> [fname, "(", "distinct", arg_list_or_star, ")"]
function -> [fname, "(", arg_list_or_star, ")"]
group_clause -> [expr, ",", group_clause]
group_clause -> [expr]
groupby_clause -> ["group", "by", group_clause, "having", expr]
groupby_clause -> ["group", "by", group_clause]
in_expr -> [value, "in", expr]
in_expr -> [value, "in", string_set]
in_expr -> [value, "not", "in", expr]
in_expr -> [value, "not", "in", string_set]
iue -> ["except"]
iue -> ["intersect"]
iue -> ["union"]
join_clause -> ["join", table_name, "on", join_condition_clause]
join_clauses -> [join_clause, join_clauses]
join_clauses -> [join_clause]
join_condition -> [column_name, "=", column_name]
join_condition_clause -> [join_condition, "and", join_condition_clause]
join_condition_clause -> [join_condition]
limit -> ["limit", non_literal_number]
non_literal_number -> ["1"]
non_literal_number -> ["2"]
non_literal_number -> ["3"]
non_literal_number -> ["4"]
number -> ["value"]
order_clause -> [ordering_term, ",", order_clause]
order_clause -> [ordering_term]
orderby_clause -> ["order", "by", order_clause]
ordering -> ["asc"]
ordering -> ["desc"]
ordering_term -> [expr, ordering]
ordering_term -> [expr]
parenval -> ["(", expr, ")"]
query -> [select_core, groupby_clause, limit]
query -> [select_core, groupby_clause, orderby_clause, limit]
query -> [select_core, groupby_clause, orderby_clause]
query -> [select_core, groupby_clause]
query -> [select_core, orderby_clause, limit]
query -> [select_core, orderby_clause]
query -> [select_core]
select_core -> [select_with_distinct, select_results, from_clause, where_clause]
select_core -> [select_with_distinct, select_results, from_clause]
select_core -> [select_with_distinct, select_results, where_clause]
select_core -> [select_with_distinct, select_results]
select_result -> ["*"]
select_result -> [column_name]
select_result -> [expr]
select_result -> [table_name, ".*"]
select_results -> [select_result, ",", select_results]
select_results -> [select_result]
select_with_distinct -> ["select", "distinct"]
select_with_distinct -> ["select"]
single_source -> [source_subq]
single_source -> [table_name]
source -> [single_source, ",", source]
source -> [single_source]
source_subq -> ["(", query, ")"]
statement -> [query, iue, query]
statement -> [query]
string -> ["'", "value", "'"]
string_set -> ["(", string_set_vals, ")"]
string_set_vals -> [string, ",", string_set_vals]
string_set_vals -> [string]
unaryop -> ["+"]
unaryop -> ["-"]
unaryop -> ["not"]
value -> ["YEAR(CURDATE())"]
value -> [boolean]
value -> [column_name]
value -> [function]
value -> [number]
value -> [parenval]
value -> [string]
where_clause -> ["where", expr, where_conj]
where_clause -> ["where", expr]
where_conj -> ["and", expr, where_conj]
where_conj -> ["and", expr]
